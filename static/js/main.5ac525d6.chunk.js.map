{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["INITIAL_VIEW_STATE","latitude","longitude","zoom","pitch","bearing","setDefaultCredentials","username","apiKey","lightingEffect","LightingEffect","light1","AmbientLight","color","intensity","light2","DirectionalLight","direction","_shadow","shadowColor","theme","buildingColor","material","ambient","diffuse","shininess","specularColor","effects","Map","useState","viewState","updateViewState","bldgLayer","CartoLayer","id","type","MAP_TYPES","QUERY","data","getFillColor","getLineColor","elevationScale","lineWidthMinPixels","pickable","filled","extruded","wireframe","getElevation","f","properties","height","groundLayer","PolygonLayer","getPolygon","stroked","precintLayer","getDashArray","dashJustified","dashGapPickable","extensions","PathStyleExtension","dash","width","controller","layers","onViewStateChange","v","getTooltip","object","zones","reuseMaps","mapStyle","mapboxApiAccessToken","preventStyleDiffing","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ac525d6.chunk.js","sourcesContent":["import React, { useState, useEffect,useCallback } from 'react'\r\nimport { CartoLayer, CartoSQLLayer, MAP_TYPES, setDefaultCredentials, BASEMAP ,API_VERSIONS,colorBins} from '@deck.gl/carto';\r\nimport {PolygonLayer} from '@deck.gl/layers'\r\nimport {LinearInterpolator} from '@deck.gl/core';\r\nimport axios from 'axios';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {AmbientLight, PointLight, DirectionalLight, LightingEffect} from '@deck.gl/core';\r\nimport {PathStyleExtension} from '@deck.gl/extensions';\r\n// import {WebMercatorViewport,LinearInterpolator} from '@deck.gl/core';\r\n\r\n\r\n\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    latitude: -33.8058087,\r\n    longitude: 150.9872926,\r\n    zoom:15,\r\n    pitch: 50,//60\r\n    bearing: 0\r\n  };\r\n\r\nconst credentials = {\r\n  username: 'gsc-admin',\r\n  apiKey: 'default_public'//'fFbU97TNhKdhIO4yYyFjdA'\r\n  }\r\nsetDefaultCredentials(credentials);\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiYnNuYXlhbiIsImEiOiJja3Ewczd3MW4wN3Z3MnVvNDNsenlzNnFsIn0.f8nk8yrxIeCKOlzIy1b-Pg'\r\n\r\n//const transitionInterpolator = new LinearInterpolator();\r\n\r\nconst getFillColor = (value)=>{\r\n  return value=='Residential'?[255,255,255]:[238, 170, 142]\r\n}\r\n\r\n// puting some ligtening effects\r\nconst material = {\r\n  ambient: 0.2,\r\n  diffuse: 0.6,\r\n  shininess: 32,\r\n  specularColor: [232, 232, 247]\r\n};\r\n\r\nconst lightingEffect = new LightingEffect({\r\n  light1: new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0\r\n  }),\r\n  light2: new DirectionalLight({\r\n    color: [255, 255, 255],\r\n    intensity: 2.0,\r\n    direction: [-1, -2, -3],\r\n    _shadow: true\r\n  })\r\n});\r\n\r\nlightingEffect.shadowColor = [0, 0, 0, 0.3];\r\n\r\nconst theme = {\r\n  buildingColor: [232, 232, 247],\r\n  material,\r\n  effects: [lightingEffect]\r\n};\r\n\r\n\r\nconst Map =()=>{\r\n\r\n  const [viewState, updateViewState] = useState(INITIAL_VIEW_STATE);\r\n\r\n  const SqlBldg = `\r\n  SELECT the_geom_webmercator,maximum_roof_height as height,zones  FROM whid_gda94_building_polygon_whid where maximum_roof_height >0\r\n  `\r\n\r\n\r\n\r\n  //console.log(domain);\r\n\r\n  \r\n\r\n  // const rotateCamera = useCallback(() => {\r\n  //   updateViewState(v => ({\r\n  //     ...v,\r\n  //     bearing: v.bearing +0.5,\r\n  //     transitionDuration: 0,\r\n  //     transitionInterpolator,\r\n  //     onTransitionEnd: rotateCamera\r\n  //   }));\r\n  // }, []);\r\n \r\n  // const material  ={\r\n  //   ambient: 0.35,\r\n  //   diffuse: 0.6,\r\n  //   shininess: 32,\r\n  //   specularColor: [30, 30, 30]\r\n  // };\r\n\r\n\r\n\r\n  const bldgLayer = new CartoLayer({\r\n    id:'building',\r\n    type: MAP_TYPES.QUERY,\r\n    data:SqlBldg,\r\n    getFillColor:theme.buildingColor,\r\n    \r\n    // getFillColor: (object)=>{\r\n    //   return [...getFillColor(object.properties.zones,200)]\r\n    // },\r\n    // getFillColor:colorBins({\r\n    //   attr: 'height',\r\n    //   domain: [0, 20, 30, 40, 50, 60, 70],\r\n    //   colors: 'PinkYl'\r\n    // }),\r\n    getLineColor:theme.buildingColor,\r\n    elevationScale:3,\r\n    lineWidthMinPixels: 0,\r\n    pickable: true,\r\n    filled: true,\r\n    extruded: true,\r\n    wireframe: true,\r\n    getElevation: f => {\r\n        return f.properties.height ? f.properties.height : 0;\r\n      },\r\n      // transitions: {\r\n      //   getElevation: {\r\n      //     duration: 1000,\r\n      //     enter: () => [0]\r\n      //   }\r\n      // }\r\n    }\r\n  )\r\n  \r\n  const groundLayer =  new PolygonLayer({\r\n    id: 'ground-layer',\r\n    data: [[[150.01467801500007,-34.337415905999933],[150.01467801500007,-32.996069222999949],[151.34389995600009,-32.996069222999949],[151.34389995600009,-34.337415905999933],[150.01467801500007,-34.337415905999933]]],\r\n    getPolygon: f => f,\r\n    stroked: false,\r\n    getFillColor: [0, 0, 0, 0]\r\n  });\r\n\r\n  const districtLayer = new CartoLayer({\r\n    id:'district',\r\n    type: MAP_TYPES.QUERY,\r\n    data: `select the_geom_webmercator, district from \"gsc-admin\".districtboundary `,\r\n  \r\n    getFillColor: [0,0,0,0],\r\n    getLineColor: [211,211,211],\r\n    lineWidthMinPixels: 1,\r\n    pickable: false,\r\n    \r\n  })\r\n\r\n  const precintLayer = new CartoLayer({\r\n    id:'precinct-layer',\r\n    type: MAP_TYPES.QUERY,\r\n    data:'SELECT the_geom_webmercator,description from whid_gda94_westmead_health_precinct',\r\n    lineWidthMinPixels:2,\r\n    getFillColor:[0,0,0,0],\r\n    getLineColor:[0,0,0],\r\n    getDashArray: [3, 2],\r\n  dashJustified: true,\r\n  dashGapPickable: true,\r\n  extensions: [new PathStyleExtension({dash: true})]\r\n\r\n  })\r\n\r\n  //console.log(color.domain())\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <DeckGL\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        controller={true}\r\n        viewState={viewState}\r\n        layers={[groundLayer,bldgLayer,precintLayer]}\r\n        // getTooltip={getTooltip}\r\n        //onLoad={rotateCamera}\r\n        onViewStateChange={v => updateViewState(v.viewState)}\r\n        getTooltip={ ({ object }) => object && `zones: ${object.properties.zones}`}\r\n        effects ={ theme.effects}\r\n       \r\n      >\r\n        <StaticMap\r\n          reuseMaps\r\n          mapStyle= 'mapbox://styles/mapbox/light-v10'//{BASEMAP.PRISTON}//\"mapbox://styles/mapbox/dark-v9\"\r\n          mapboxApiAccessToken= {MAPBOX_ACCESS_TOKEN}\r\n          preventStyleDiffing\r\n        />\r\n      </DeckGL>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n}\r\n;\r\n\r\nexport default Map;","import React from 'react';\n\nimport Map from './Map';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n      <Map />\n    \n \n     \n\n \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}